// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// int_get_exif
List int_get_exif(std::string path);
RcppExport SEXP _exiv_int_get_exif(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(int_get_exif(path));
    return rcpp_result_gen;
END_RCPP
}
// int_set_exif_ascii
void int_set_exif_ascii(std::string path, std::string key, std::string value);
RcppExport SEXP _exiv_int_set_exif_ascii(SEXP pathSEXP, SEXP keySEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    int_set_exif_ascii(path, key, value);
    return R_NilValue;
END_RCPP
}
// int_set_exif_long
void int_set_exif_long(std::string path, std::string key, long int value);
RcppExport SEXP _exiv_int_set_exif_long(SEXP pathSEXP, SEXP keySEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    Rcpp::traits::input_parameter< long int >::type value(valueSEXP);
    int_set_exif_long(path, key, value);
    return R_NilValue;
END_RCPP
}
// int_set_exif_short
void int_set_exif_short(std::string path, std::string key, long int value);
RcppExport SEXP _exiv_int_set_exif_short(SEXP pathSEXP, SEXP keySEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    Rcpp::traits::input_parameter< long int >::type value(valueSEXP);
    int_set_exif_short(path, key, value);
    return R_NilValue;
END_RCPP
}
// int_set_exif_rational
void int_set_exif_rational(std::string path, std::string key, int32_t p, int32_t q);
RcppExport SEXP _exiv_int_set_exif_rational(SEXP pathSEXP, SEXP keySEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    Rcpp::traits::input_parameter< int32_t >::type p(pSEXP);
    Rcpp::traits::input_parameter< int32_t >::type q(qSEXP);
    int_set_exif_rational(path, key, p, q);
    return R_NilValue;
END_RCPP
}
// int_set_exif_urational
void int_set_exif_urational(std::string path, std::string key, uint32_t p, uint32_t q);
RcppExport SEXP _exiv_int_set_exif_urational(SEXP pathSEXP, SEXP keySEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    Rcpp::traits::input_parameter< uint32_t >::type p(pSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type q(qSEXP);
    int_set_exif_urational(path, key, p, q);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_exiv_int_get_exif", (DL_FUNC) &_exiv_int_get_exif, 1},
    {"_exiv_int_set_exif_ascii", (DL_FUNC) &_exiv_int_set_exif_ascii, 3},
    {"_exiv_int_set_exif_long", (DL_FUNC) &_exiv_int_set_exif_long, 3},
    {"_exiv_int_set_exif_short", (DL_FUNC) &_exiv_int_set_exif_short, 3},
    {"_exiv_int_set_exif_rational", (DL_FUNC) &_exiv_int_set_exif_rational, 4},
    {"_exiv_int_set_exif_urational", (DL_FUNC) &_exiv_int_set_exif_urational, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_exiv(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
